package com.unitOrReflection.UnitTest;

/*
*
* 之前只能在main方法编写测试代码，去调用其他方法进行测试
* 无法实现自动化测试，一个方法测试失效，可能影响其他方法的测试
* 无法得到测试的报告，需要开发者自己去观察测试是否正常
*
* 单元测试
* 就是针对最小的功能单元（方法），编写测试代码对其进行正确性测试
* Junit单元测试框架
* 灵活编写测试代码，可以针对某个方法执行测试，也支持一键完成对全部方法的自动化测试，且各自独立
* 使用步骤
* 将Junit框架的jar包导入到项目中（IDEA集成了Junit框架，不需要手动导入）
* 定义对应的测试了，编写测试方法（必须：公共、无参、无返回值）
* 测试方法必须声明@Test注解
* 右键Junit运行，绿色测试正常，红色测试失败
*
* Junit4版本常用注解
* |注解|说明|
* |@Test|测试类中的方法必须用它修饰才能成为测试方法，才能启动执行|
* |@Before|用来修饰一个实例方法，该方法会在每一个测试方法执行之前执行一次|
* |@After|用来修饰一个实例方法，该方法会在每一个测试方法执行之后执行一次|
* |@BeforeClass|用来修饰一个静态方法，该方法会在所有测试方法之前只执行一次|
* |@AfterClass|用来修饰一个静态方法，该方法会在所有测试方法之后只执行一次|
* 在测试方法执行前执行的方法：常用于初始化资源
* 在测试方法执行完后再执行的方法：常用于释放资源
*
* Junit5版本常用注解
* |注解|说明|
* |@Test|测试类中的方法必须用它修饰才能成为测试方法，才能启动执行|
* |@BeforeEach|用来修饰一个实例方法，该方法会在每一个测试方法执行之前执行一次|
* |@AfterEach|用来修饰一个实例方法，该方法会在每一个测试方法执行之后执行一次|
* |@BeforeAll|用来修饰一个静态方法，该方法会在所有测试方法之前只执行一次|
* |@AfterAll|用来修饰一个静态方法，该方法会在所有测试方法之后只执行一次|
* 开始执行的方法：常用于初始化资源
* 执行完之后的方法：常用于释放资源
*
* */
public class Demo {
    public static void test1(String name){
        if(name == null){
            System.out.println("测试用例bug");
            return;
        }
        System.out.println("字符串长度"+name.length());
    }

    public static int test2(String data){
        if(data == null){
            return  -1;
        }
        return data.length();
    }
}

